# SPDX-FileCopyrightText: 2025 Frans van Dorsselaer
#
# SPDX-License-Identifier: GPL-3.0-only

---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build

on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install tooling
        # See https://musl.cc/ and https://github.com/orgs/community/discussions/27906#discussioncomment-3332440
        # GitHub actions are blocked, so we use a mirror.
        # As a bonus, this allows us to pin to a certain toolchain release version.
        run: |
          wget --no-verbose https://github.com/xmake-mirror/musl.cc/releases/download/20210202/x86_64-linux-musl-cross.linux.tgz
          wget --no-verbose https://github.com/xmake-mirror/musl.cc/releases/download/20210202/aarch64-linux-musl-cross.linux.tgz
          tar xfz x86_64-linux-musl-cross.linux.tgz
          tar xfz aarch64-linux-musl-cross.linux.tgz

      - name: Build libudev (x64)
        run: |
          cd libudev-zero
          make clean
          make \
            CC=`realpath ../x86_64-linux-musl-cross/bin/x86_64-linux-musl-cc` \
            AR=`realpath ../x86_64-linux-musl-cross/bin/x86_64-linux-musl-ar` \
            DESTDIR=x64 \
            install-static

      - name: Build libudev (arm64)
        run: |
          cd libudev-zero
          make clean
          make \
            CC=`realpath ../aarch64-linux-musl-cross/bin/aarch64-linux-musl-cc` \
            AR=`realpath ../aarch64-linux-musl-cross/bin/aarch64-linux-musl-ar` \
            DESTDIR=arm64 \
            install-static

      - name: Prepare building usbip
        run: |
          cd WSL2-Linux-Kernel/tools/usb/usbip
          aclocal
          libtoolize
          autoheader
          autoconf
          automake --add-missing

      - name: Build usbip (x64)
        run: |
          cd WSL2-Linux-Kernel/tools/usb/usbip
          ./configure \
            --host=x86_64-linux-musl \
            CC=`realpath ../../../../x86_64-linux-musl-cross/bin/x86_64-linux-musl-cc` \
            CFLAGS=-I`realpath ../../../../libudev-zero/x64/usr/local/include` \
            LDFLAGS="--static -Wl,--strip-all  -L`realpath ../../../../libudev-zero/x64/usr/local/lib`" \
            --disable-shared
          make clean
          make -C libsrc
          make -C src usbip
          mkdir -p "${{ github.workspace }}/x64"
          cp src/usbip "${{ github.workspace }}/x64"

      - name: Build usbip (arm64)
        run: |
          cd WSL2-Linux-Kernel/tools/usb/usbip
          ./configure \
            --host=aarch64-linux-musl \
            CC=`realpath ../../../../aarch64-linux-musl-cross/bin/aarch64-linux-musl-cc` \
            CFLAGS=-I`realpath ../../../../libudev-zero/arm64/usr/local/include` \
            LDFLAGS="--static -Wl,--strip-all  -L`realpath ../../../../libudev-zero/arm64/usr/local/lib`" \
            --disable-shared
          make clean
          make -C libsrc
          make -C src usbip
          mkdir -p "${{ github.workspace }}/arm64"
          cp src/usbip "${{ github.workspace }}/arm64"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            x64/
            arm64/
